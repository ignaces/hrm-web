
@layout('layouts/nomenu')

 <!-- DataTables -->
@section('pluginsCss')        
    <link href="/assets/plugins/bootstrap-tagsinput/css/bootstrap-tagsinput.css" rel="stylesheet" />
        
    <link href="/assets/plugins/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet" />
    <link href="/assets/plugins/vis/vis.css" rel="stylesheet" type="text/css" />

    <link href="/assets/plugins/spinkit/spinkit.css" rel="stylesheet" />
    <style type="text/css">
        #mynetwork {
            width: 100%;
            height: 600px;
            border: 1px solid lightgray;
        }
        #loadingBar {
            position:absolute;
            top:0px;
            left:0px;
            width: 100%;
            height: 600px;
            background-color:rgba(200,200,200,0.8);
            -webkit-transition: all 0.5s ease;
            -moz-transition: all 0.5s ease;
            -ms-transition: all 0.5s ease;
            -o-transition: all 0.5s ease;
            transition: all 0.5s ease;
            opacity:1;
        }
        #wrapper {
            position:relative;
            width:900px;
            height:900px;
        }

      


     
   
        .sk-cube:before{
            background-color:#797979 !important;
        }

      
    </style>
@endsection
@section('scripts')
       <script src="/assets/plugins/vis/hammer.js" type="text/javascript"></script>
       <script src="/assets/plugins/vis/vis.js" type="text/javascript"></script>
       <script type="text/javascript">

       $(document).ready(function(){
           // create an array with nodes
            /*var nodes = new vis.DataSet([
               @each(node in graph.nodes)
                    {id:{{node.id}},label:"{{node.properties.nombre}} {{node.properties.apellidoPaterno}}" },
               @endeach 
            ]);

            // create an array with edges
            var edges = new vis.DataSet([
                @each(relacion in graph.edges)
                    {
                        from:{{relacion.startNode}},
                        to:{{relacion.endNode}},
                        arrows:'to',
                        //label:"{{relacion.type}}",
                        length:300 
                    },
               @endeach 
            ]);*/

            var nodes = new vis.DataSet([
               @each(node in graph.nodes)
                    {id:{{node.id}},label:"{{node.properties.nombre}} {{node.properties.apellidoPaterno}}" },
               @endeach 
            ]);

            

          
/*
            @each(node in graph.nodes)
                    {id:{{node.id}},label:"{{node.properties.nombre}} {{node.properties.apellidoPaterno}}" },
               @endeach 
*/
            // create an array with edges
            var edges = new vis.DataSet([
                
                   @each(relacion in graph.edges)
                    {
                        from:{{relacion.startNode}},
                        to:{{relacion.endNode}},
                        arrows:'to',
                        //label:"{{relacion.type}}",
                        length:300 
                    },
               @endeach 
            ]);

            // create a network
            var container = document.getElementById('mynetwork');

            // provide the data in the vis format
            var data = {
                nodes: nodes,
                edges: edges
            };
            var options = {
                nodes: {
                    shape: 'circle',
                    widthConstraint:{
                        minimum:90,
                        maximum:90
                    },
                    font: {
                        size: 15
                    },
                    borderWidth: 2,
                    shadow:false
                },
                edges: {
                    width: 2,
                    shadow:false,
                    smooth:true
                },
                physics:{
                    enabled:true,
                    barnesHut:{
                        gravitationalConstant:-15000,
                        centralGravity:0,
                        springLength:150,
                        springConstant:0.02
                    }
                }
            };



            // initialize your network!
            var network = new vis.Network(container, data, options);

            network.on("stabilizationProgress", function(params) {
               
                
            });
            network.once("stabilizationIterationsDone", function() {
                
                document.getElementById('loadingBar').style.opacity = 0;
                // really clean the dom element
                setTimeout(function () {document.getElementById('loadingBar').style.display = 'none';}, 500);
            });

            //setInterval(function(){ refreshGraph(); }, 3000);
setTimeout(function(){ 

    @each(node in graph.nodes)
                    //nodes.add({id:{{node.id}},label:"{{node.properties.nombre}} {{node.properties.apellidoPaterno}}" })
               @endeach 
/*
               @each(relacion in graph.edges)
                    edges.add({
                        from:{{relacion.startNode}},
                        to:{{relacion.endNode}},
                        arrows:'to',
                        //label:"{{relacion.type}}",
                        length:300 
                    })
               @endeach
               */
    
    }, 1000);
           
       });

       
            
</script>
@endsection
@section('content')

    <div class="row">

        <div class="col-sm-12">
            <div class="card-box table-responsive"> 
                <h4 class="m-t-0 header-title">
                    <b>Redes</b>
                </h4>
                    <p class="text-muted font-14 m-b-30">
                        Redes de Energ√≠a
                    </p>
                   
                    <div id="mynetwork"></div>
                    <div id="loadingBar">
                        <div  class="sk-folding-cube">
                                        <div class="sk-cube1 sk-cube"></div>
                                        <div class="sk-cube2 sk-cube"></div>
                                        <div class="sk-cube4 sk-cube"></div>
                                        <div class="sk-cube3 sk-cube"></div>
                                    </div>
                        <div style="width:100%;text-align:center;">Cargando</div>
                       
                    </div>
            </div> 
        </div>
    </div>
  
        
@endsection
